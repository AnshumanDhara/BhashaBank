# -*- coding: utf-8 -*-
"""OCR+Translate.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bqmTbNOI0io-UUq9kgV9Fxbp3tym3Y_2
"""

# !pip install easyocr
import easyocr
import re

def create_reader(language, use_gpu=True):
    """
    Create an EasyOCR Reader object based on the specified language.

    Parameters:
        language (str): Language code for the OCR.
        use_gpu (bool): Whether to use GPU for processing.

    Returns:
        easyocr.Reader: Reader object for OCR.
    """
    return easyocr.Reader([language], gpu=use_gpu)

def main():
# Prompt the user to input the language of the image
  language = input("Enter the language code of the image (Hindi, Tamil, Telugu, Bengali, Marathi) : ").lower()

    # Create reader based on language using if-else for specific language codes
  if language in ("hindi", "hi"):
      reader = easyocr.Reader(["hi"])
  elif language in ("tamil", "ta"):
      reader = easyocr.Reader(["ta"])
  elif language in ("telugu", "te"):
      reader = easyocr.Reader(["te"])
  elif language in ("bengali", "bn"):
      reader = easyocr.Reader(["bn"])
  elif language in ("marathi", "mr"):
      reader = easyocr.Reader(["mr"])
  else:
      # print("Invalid language code entered. Please try again.")
      reader = easyocr.Reader(["en"])

  if reader is not None:
    new_image_path = input("Enter the path : ")  # Replace this with the actual path to your image

      # Perform OCR on the image
    results = reader.readtext(new_image_path)

      # Print the OCR results
    for result in results:
      print(result[1])

  else:
      print("Reader creation failed.")

      # Path to the image
  return results


if __name__ == "__main__":
  results = main()



# !pip install googletrans==4.0.0-rc1


from googletrans import Translator

def translate_text(text, target_language='en'):
    translator = Translator()
    translated_text = translator.translate(text, dest=target_language)
    return translated_text.text

detected_text = ' '.join(result[1] for result in results)

          # Detect language of the text
detected_language = Translator().detect(detected_text).lang

          # Translate text to English if it's not already in English
if detected_language != 'en':
    translated_text = translate_text(detected_text)
    print("Detected Language:", detected_language)
    print("Translated Text (English):", translated_text)
else:
    print("Detected Language: English")
    print("Text:", detected_text)

def extract_card_number(text):
    # Regular expression pattern for detecting card numbers
    card_number_pattern = re.compile(r'\b\d{4}\s\d{4}\s\d{4}\b')
    name_pattern = re.compile(r'\b[A-Z][a-z]+ [A-Z][a-z]+ [A-Z][a-z]+\b')

    # Find all names in the text
    names = name_pattern.findall(text)
    # Find all unique card numbers in the text
    card_numbers = set(card_number_pattern.findall(text))

    return [names, card_numbers]

# Extract unique card numbers from the text
names, card_numbers = extract_card_number(detected_text)

# Display the extracted unique card number(s)
print("Card Numbers:", card_numbers)
print("Names:", names)

import re

def extract_pan_numbers(text):
    # Regular expression pattern for detecting PAN numbers
    pan_number_pattern = re.compile(r'\b[A-Z][A-Za-z0-9]{4}[0-9]{4}[A-Z]\b')

    # Find all PAN numbers in the text
    pan_numbers = pan_number_pattern.findall(text)

    return pan_numbers

# Extract PAN numbers from the text
pan_numbers = extract_pan_numbers(detected_text)

# Display the extracted PAN numbers
print("PAN Numbers:", pan_numbers)

text = [names, card_numbers,detected_text, translated_text]

import easyocr
from googletrans import Translator
import re

def create_reader(language, use_gpu=True):
    """
    Create an EasyOCR Reader object based on the specified language.

    Parameters:
        language (str): Language code for the OCR.
        use_gpu (bool): Whether to use GPU for processing.

    Returns:
        easyocr.Reader: Reader object for OCR.
    """
    return easyocr.Reader([language], gpu=use_gpu)

def translate_text(text, target_language='en'):
    translator = Translator()
    translated_text = translator.translate(text, dest=target_language)
    return translated_text.text

def extract_card_number(text):
    # Regular expression pattern for detecting card numbers
    card_number_pattern = re.compile(r'\b\d{4}\s\d{4}\s\d{4}\b')
    name_pattern = re.compile(r'\b[A-Z][a-z]+ [A-Z][a-z]+ [A-Z][a-z]+\b')

    # Find all names in the text
    names = name_pattern.findall(text)
    # Find all unique card numbers in the text
    card_numbers = set(card_number_pattern.findall(text))

    return names, card_numbers

def extract_pan_numbers(text):
    # Regular expression pattern for detecting PAN numbers
    pan_number_pattern = re.compile(r'\b[A-Z][A-Za-z0-9]{4}[0-9]{4}[A-Z]\b')

    # Find all PAN numbers in the text
    pan_numbers = pan_number_pattern.findall(text)

    return pan_numbers

def performOCR(language,path):

    language.lower()
    if language in ("hindi", "hi"):
        reader = easyocr.Reader(["hi"])
    elif language in ("tamil", "ta"):
        reader = easyocr.Reader(["ta"])
    elif language in ("telugu", "te"):
        reader = easyocr.Reader(["te"])
    elif language in ("bengali", "bn"):
        reader = easyocr.Reader(["bn"])
    elif language in ("marathi", "mr"):
        reader = easyocr.Reader(["mr"])
    else:
        reader = easyocr.Reader(["en"])

    if reader is not None:
        # new_image_path = input("Enter the path : ")
        new_image_path = path
        results = reader.readtext(new_image_path)

        detected_text = ' '.join(result[1] for result in results)
        detected_language = Translator().detect(detected_text).lang

        if detected_language != 'en':
            translated_text = translate_text(detected_text)
            # print("Detected Language:", detected_language)
            # print("Translated Text (English):", translated_text)
        else:
            print("Detected Language: English")
            print("Text:", detected_text)

        # Extract card numbers and PAN numbers
        names, card_numbers = extract_card_number(detected_text)
        pan_numbers = extract_pan_numbers(detected_text)

        context = {
            'detected_text': detected_text,
            'translated_text': translated_text,
            'detected_language': detected_language,
            'card_numbers': card_numbers,
            'names': names,
            'pan_numbers': pan_numbers,
        }

        return context

    else:
        print("Reader creation failed.")

    return None

performOCR("telugu","telugu2.jpg")

